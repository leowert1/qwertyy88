import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiohttp import BasicAuth  # –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏

API_TOKEN = '7994720080:AAH3ce5aynjtsmeUsdHJVp3XhnVkghoe5Ro'

# IDs –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMINS = [994429313]

# GIF –¥–ª—è –º–µ–Ω—é
GIF_URL = "https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExcGhiM2VsenpkOXRudGFldm9rN3M4NHY2ajN4b2luaXVvNmQ2bmVqciZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/xFWaAI8TKA0nrIpBQh/giphy.gif"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –≥–∏—Ñ–∫—É

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏
bot= Bot(token=API_TOKEN)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
users = {}
subscriptions = {}

# –°—Å—ã–ª–∫–∞ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–±–æ—Ç (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é)
CRYPTOBOT_LINK = "http://t.me/send?start=IVUTRjlO9fUL"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="üî® –°–Ω–æ—Å", callback_data="demolition"),
        InlineKeyboardButton(text="üì¢ –ö–∞–Ω–∞–ª", callback_data="channel")
    )
    keyboard.row(
        InlineKeyboardButton(text="ü§ù –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals"),
        InlineKeyboardButton(text="üí≥ –ü–æ–∫—É–ø–∫–∞", callback_data="purchase")
    )
    keyboard.row(
        InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        InlineKeyboardButton(text="‚è± –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")
    )
    return keyboard.as_markup()

@dp.message(Command(commands=["start"]))
async def send_welcome(message: types.Message):
    args = message.text.split(maxsplit=1)
    referrer_id = args[1] if len(args) > 1 else None

    if message.from_user.id not in users:
        users[message.from_user.id] = {"referrals": 0, "subscription": None}

    if referrer_id and referrer_id.isdigit() and int(referrer_id) != message.from_user.id:
        referrer_id = int(referrer_id)
        if referrer_id in users:
            users[referrer_id]["referrals"] += 1
            if users[referrer_id]["referrals"] >= 40:
                users[referrer_id]["subscription"] = "lifetime"
                await bot.send_message(referrer_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–≤—Å–µ–≥–¥–∞ –∑–∞ 40 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!")

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–∏—Ñ–∫–æ–π
    await bot.send_animation(
        chat_id=message.chat.id,
        animation=GIF_URL,
        caption=(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–º—ã–π –º–æ—â–Ω—ã–π –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±!\n\n"
            "–ù–∞—à —Å–Ω–æ—Å–µ—Ä üî® **—Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é** üî•\n"
            "üìä –ë–æ–ª–µ–µ 168 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!\n"
            "üíé –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ —Å—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é –Ω–∞—à–µ–≥–æ —ç–ª–∏—Ç–Ω–æ–≥–æ –∫–ª—É–±–∞!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ: üëá"
        ),
        reply_markup=main_menu_keyboard()
    )
@dp.callback_query(lambda query: query.data == "demolition")
async def handle_demolition(callback_query: CallbackQuery):
    await callback_query.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–°–Ω–æ—Å' üî®")
    await bot.send_message(callback_query.from_user.id, "üì© –ü—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

@dp.callback_query(lambda query: query.data == "channel")
async def handle_channel(callback_query: CallbackQuery):
    await callback_query.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ö–∞–Ω–∞–ª' üì¢")
    await bot.send_message(callback_query.from_user.id, "üîó –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: https://t.me/your_channel")

@dp.callback_query(lambda query: query.data == "referrals")
async def handle_referrals(callback_query: CallbackQuery):
    user_data = users.get(callback_query.from_user.id, {"referrals": 0, "subscription": None})
    referral_count = user_data["referrals"]
    subscription = user_data["subscription"] or "–Ω–µ—Ç"
    referral_link = f"https://t.me/{(await bot.get_me()).username}?start={callback_query.from_user.id}"

    await bot.send_message(
        callback_query.from_user.id,
        f"ü§ù –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {referral_count}\n"
        f"‚è± –ü–æ–¥–ø–∏—Å–∫–∞: {subscription}\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{referral_link}"
    )

@dp.callback_query(lambda query: query.data == "purchase")
async def handle_purchase(callback_query: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=CRYPTOBOT_LINK)]
        ]
    )
    await bot.send_message(
        callback_query.from_user.id,
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–æ–∫:\n"
        "‚è± –ú–µ—Å—è—Ü - 3$\n"
        "‚ôæÔ∏è –ù–∞–≤—Å–µ–≥–¥–∞ - 5$\n\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π, –Ω–∞–ø–∏—à–∏—Ç–µ @cekonor.",
        reply_markup=keyboard
    )

@dp.callback_query(lambda query: query.data == "profile")
async def handle_profile(callback_query: CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"üÜî ID: {callback_query.from_user.id}\n"
        f"ü§ù –†–µ—Ñ–µ—Ä–∞–ª—ã: {users.get(callback_query.from_user.id, {}).get('referrals', 0)}"
    )

@dp.callback_query(lambda query: query.data == "subscription")
async def handle_subscription(callback_query: CallbackQuery):
    subscription = users.get(callback_query.from_user.id, {}).get("subscription", "–Ω–µ—Ç")
    await bot.send_message(
        callback_query.from_user.id,
        f"‚è± –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {subscription}"
    )

@dp.message(lambda msg: msg.text and msg.text.startswith("http"))
async def handle_link(message: types.Message):
    await message.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ, –∂–∞–ª–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è!")
    await asyncio.sleep(30)
    total_sessions = 168
    successful_sessions = random.randint(128, total_sessions)
    unsuccessful_sessions = total_sessions - successful_sessions
    await message.answer(f"üìä –ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –≤–∞—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n"
                         f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {successful_sessions}\n"
                         f"‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {unsuccessful_sessions}")

async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
